//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WifiWPFClient.WifiService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WifiService.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSecurityCode", ReplyAction="http://tempuri.org/IService1/GetSecurityCodeResponse")]
        string GetSecurityCode(string EmailHash, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSecurityCode", ReplyAction="http://tempuri.org/IService1/GetSecurityCodeResponse")]
        System.Threading.Tasks.Task<string> GetSecurityCodeAsync(string EmailHash, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        string Login(string Evidence, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Login", ReplyAction="http://tempuri.org/IService1/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string Evidence, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConnectUS", ReplyAction="http://tempuri.org/IService1/ConnectUSResponse")]
        string ConnectUS(string ClientEvidence, string ProviderEvidence, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ConnectUS", ReplyAction="http://tempuri.org/IService1/ConnectUSResponse")]
        System.Threading.Tasks.Task<string> ConnectUSAsync(string ClientEvidence, string ProviderEvidence, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetUsage", ReplyAction="http://tempuri.org/IService1/SetUsageResponse")]
        string SetUsage(string ClientUsageMsg, string ProviderUsageMsg, long ConnectionID, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetUsage", ReplyAction="http://tempuri.org/IService1/SetUsageResponse")]
        System.Threading.Tasks.Task<string> SetUsageAsync(string ClientUsageMsg, string ProviderUsageMsg, long ConnectionID, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        string Register(string Email, string Pass, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Register", ReplyAction="http://tempuri.org/IService1/RegisterResponse")]
        System.Threading.Tasks.Task<string> RegisterAsync(string Email, string Pass, string AFQ, string LangCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Remove", ReplyAction="http://tempuri.org/IService1/RemoveResponse")]
        void Remove(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Remove", ReplyAction="http://tempuri.org/IService1/RemoveResponse")]
        System.Threading.Tasks.Task RemoveAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendResetPasswordCode", ReplyAction="http://tempuri.org/IService1/SendResetPasswordCodeResponse")]
        string SendResetPasswordCode(string EmailHash, string LangCode, string AFQ);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SendResetPasswordCode", ReplyAction="http://tempuri.org/IService1/SendResetPasswordCodeResponse")]
        System.Threading.Tasks.Task<string> SendResetPasswordCodeAsync(string EmailHash, string LangCode, string AFQ);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WifiWPFClient.WifiService.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WifiWPFClient.WifiService.IService1>, WifiWPFClient.WifiService.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetSecurityCode(string EmailHash, string AFQ, string LangCode) {
            return base.Channel.GetSecurityCode(EmailHash, AFQ, LangCode);
        }
        
        public System.Threading.Tasks.Task<string> GetSecurityCodeAsync(string EmailHash, string AFQ, string LangCode) {
            return base.Channel.GetSecurityCodeAsync(EmailHash, AFQ, LangCode);
        }
        
        public string Login(string Evidence, string AFQ, string LangCode) {
            return base.Channel.Login(Evidence, AFQ, LangCode);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string Evidence, string AFQ, string LangCode) {
            return base.Channel.LoginAsync(Evidence, AFQ, LangCode);
        }
        
        public string ConnectUS(string ClientEvidence, string ProviderEvidence, string AFQ, string LangCode) {
            return base.Channel.ConnectUS(ClientEvidence, ProviderEvidence, AFQ, LangCode);
        }
        
        public System.Threading.Tasks.Task<string> ConnectUSAsync(string ClientEvidence, string ProviderEvidence, string AFQ, string LangCode) {
            return base.Channel.ConnectUSAsync(ClientEvidence, ProviderEvidence, AFQ, LangCode);
        }
        
        public string SetUsage(string ClientUsageMsg, string ProviderUsageMsg, long ConnectionID, string AFQ, string LangCode) {
            return base.Channel.SetUsage(ClientUsageMsg, ProviderUsageMsg, ConnectionID, AFQ, LangCode);
        }
        
        public System.Threading.Tasks.Task<string> SetUsageAsync(string ClientUsageMsg, string ProviderUsageMsg, long ConnectionID, string AFQ, string LangCode) {
            return base.Channel.SetUsageAsync(ClientUsageMsg, ProviderUsageMsg, ConnectionID, AFQ, LangCode);
        }
        
        public string Register(string Email, string Pass, string AFQ, string LangCode) {
            return base.Channel.Register(Email, Pass, AFQ, LangCode);
        }
        
        public System.Threading.Tasks.Task<string> RegisterAsync(string Email, string Pass, string AFQ, string LangCode) {
            return base.Channel.RegisterAsync(Email, Pass, AFQ, LangCode);
        }
        
        public void Remove(string Email) {
            base.Channel.Remove(Email);
        }
        
        public System.Threading.Tasks.Task RemoveAsync(string Email) {
            return base.Channel.RemoveAsync(Email);
        }
        
        public string SendResetPasswordCode(string EmailHash, string LangCode, string AFQ) {
            return base.Channel.SendResetPasswordCode(EmailHash, LangCode, AFQ);
        }
        
        public System.Threading.Tasks.Task<string> SendResetPasswordCodeAsync(string EmailHash, string LangCode, string AFQ) {
            return base.Channel.SendResetPasswordCodeAsync(EmailHash, LangCode, AFQ);
        }
    }
}
